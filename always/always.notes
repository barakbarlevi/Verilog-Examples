20240212

Std 1364-2005 9. Behavioral modeling

Verilog behavioral models contain procedural statements that control the simulation and manipulate
variables of the data types previously described. These statements are contained within procedures. Each
procedure has an activity flow associated with it.

The activity starts at the control constructs initial and always. Each initial construct and each always
construct starts a separate activity flow. All of the activity flows are concurrent to model the inherent
concurrence of hardware.

The initial constructs execute once, and the always constructs execute repetitively.




procedural assignments are used for updating reg, integer, time, real, realtime,
and memory data types. There is a significant difference between procedural assignments and continuous
assignments:
— Continuous assignments drive nets and are evaluated and updated whenever an input operand
changes value.
— Procedural assignments update the value of variables under the control of the procedural flow
constructs that surround them.





A blocking procedural assignment statement shall be executed before the execution of the statements that
follow it in a sequential block.


The nonblocking procedural assignment allows assignment scheduling without blocking the procedural
flow. The nonblocking procedural assignment statement can be used whenever several variable assignments
within the same time step can be made without regard to order or dependence upon each other.


The nonblocking procedural assignments shall be evaluated in two steps.



At posedge c (the sensitivity list), the simulator
evaluates the right-hand sides of the nonblocking assignments and
schedules assign update events of the new values to take place at the 
end of the time period containing nonblocking assignments.

When the simulator activates the nonblocking assign update events,
the simulator updates the left-hand side of each nonblocking assignment 
statement.

The result is that nothing can 'see' the 'new' LHS values until after 
the time period expires where the LHS is assigned.  This simulates an
edge-triggered latch where propagation delay prevents the output from being
updated until /after/ the triggering edge has passed.


Non-blocking assignments within one procedural block will be done 
in the order as they appear.  But two assignments that occur in the 
same time period that appear in two different blocks are done in an
indeterminate order.



Where can we find official 'synthesis' rules?  What can and can not be
synthesized?




**********************

always_ff @(posedge clk, posedge rst, posedge en)
    if (rst)
        a <= 1'b0;
    else if (en)
        a <= b;

The en signal is not suitable to be a reset, because it doesn't set a to a constant value.

**********************


In the code below, the redundant signal is c. It's not used inside the always block, so can't be a reset. Then it becomes a candidate for clock, but we have clk signal too. The same error message is produced here.

always_ff @(posedge clk, posedge rst, posedge c)
    if (rst)
        a <= 1'b0;
    else if (en)
        a <= b;


The code snippet below is synthesizable. Since c sets a signal to a constant value, it can be a reset as well as rst signal. DC will synthesize it, but the combinational logic on the reset path may cause timing violations.

always_ff @(posedge clk, posedge rst, posedge c)
    if (rst)
        a <= 1'b0;
    else if (c)
        a <= 1'b1;
    else if (en)
        a <= b;


My last example has a redundant signal in the sensitivity list w/o any trigger condition (pos/negedge). DC produces a different error here.

always_ff @(posedge clk, posedge rst, c)
    if (rst)
        a <= 1'b0;
    else if (c)
        a <= 1'b1;
    else if (en)
        a <= b;




We always use always block with clock and reset in sensitivity list to describe sequence circuit.And use always block with every driver signals in sensitivity list to describe combinational circuit.

Sometimes sensitivity list is only important for simulations but if you forget a signal in sensitivity list you may get the wrong simulations. In real FPGA function will work fine if your logic is correct.

But it can cause some problem.

For example, if you describe a function like a=b&c in an always block with sensitivity (b); But you forget c. Then in your simulation a will not change when c is changed. But the circuit in real FPGA, will be the correct description of the function a=b&c. And you may get a warning when you synthesize your code.

You can call it ‘pre-sim and post-sim inconsistent’.

The real scary thing is that your pre-sim is right but your post-sim is wrong. That may cause the FPGA to infer incorrect logic.




********************************************************************
****** post-synth sim

https://stackoverflow.com/questions/45172834/how-to-run-post-synthesis-simulation-with-the-icestorm-ice40-fpga-flow

https://github.com/YosysHQ/icestorm/blob/master/examples/icestick/Makefile


