20240212

Std 1364-2005 9. Behavioral modeling

Verilog behavioral models contain procedural statements that control the simulation and manipulate
variables of the data types previously described. These statements are contained within procedures. Each
procedure has an activity flow associated with it.

The activity starts at the control constructs initial and always. Each initial construct and each always
construct starts a separate activity flow. All of the activity flows are concurrent to model the inherent
concurrence of hardware.

The initial constructs execute once, and the always constructs execute repetitively.




procedural assignments are used for updating reg, integer, time, real, realtime,
and memory data types. There is a significant difference between procedural assignments and continuous
assignments:
— Continuous assignments drive nets and are evaluated and updated whenever an input operand
changes value.
— Procedural assignments update the value of variables under the control of the procedural flow
constructs that surround them.





A blocking procedural assignment statement shall be executed before the execution of the statements that
follow it in a sequential block.


The nonblocking procedural assignment allows assignment scheduling without blocking the procedural
flow. The nonblocking procedural assignment statement can be used whenever several variable assignments
within the same time step can be made without regard to order or dependence upon each other.


The nonblocking procedural assignments shall be evaluated in two steps.



At posedge c (the sensitivity list), the simulator
evaluates the right-hand sides of the nonblocking assignments and
schedules assign update events of the new values to take place at the 
end of the time period containing nonblocking assignments.

When the simulator activates the nonblocking assign update events,
the simulator updates the left-hand side of each nonblocking assignment 
statement.

The result is that nothing can 'see' the 'new' LHS values until after 
the time period expires where the LHS is assigned.  This simulates an
edge-triggered latch where propagation delay prevents the output from being
updated until /after/ the triggering edge has passed.


Non-blocking assignments within one procedural block will be done 
in the order as they appear.  But two assignments that occur in the 
same time period that appear in two different blocks are done in an
indeterminate order.



Where can we find official 'synthesis' rules?  What can and can not be
synthesized?




**********************

always_ff @(posedge clk, posedge rst, posedge en)
    if (rst)
        a <= 1'b0;
    else if (en)
        a <= b;

The en signal is not suitable to be a reset, because it doesn't set a to a constant value.

**********************


In the code below, the redundant signal is c. It's not used inside the always block, so can't be a reset. Then it becomes a candidate for clock, but we have clk signal too. The same error message is produced here.

always_ff @(posedge clk, posedge rst, posedge c)
    if (rst)
        a <= 1'b0;
    else if (en)
        a <= b;


The code snippet below is synthesizable. Since c sets a signal to a constant value, it can be a reset as well as rst signal. DC will synthesize it, but the combinational logic on the reset path may cause timing violations.

always_ff @(posedge clk, posedge rst, posedge c)
    if (rst)
        a <= 1'b0;
    else if (c)
        a <= 1'b1;
    else if (en)
        a <= b;


My last example has a redundant signal in the sensitivity list w/o any trigger condition (pos/negedge). DC produces a different error here.

always_ff @(posedge clk, posedge rst, c)
    if (rst)
        a <= 1'b0;
    else if (c)
        a <= 1'b1;
    else if (en)
        a <= b;




We always use always block with clock and reset in sensitivity list to describe sequence circuit.And use always block with every driver signals in sensitivity list to describe combinational circuit.

Sometimes sensitivity list is only important for simulations but if you forget a signal in sensitivity list you may get the wrong simulations. In real FPGA function will work fine if your logic is correct.

But it can cause some problem.

For example, if you describe a function like a=b&c in an always block with sensitivity (b); But you forget c. Then in your simulation a will not change when c is changed. But the circuit in real FPGA, will be the correct description of the function a=b&c. And you may get a warning when you synthesize your code.

You can call it ‘pre-sim and post-sim inconsistent’.

The real scary thing is that your pre-sim is right but your post-sim is wrong. That may cause the FPGA to infer incorrect logic.




********************************************************************
****** post-synth sim!!!

https://stackoverflow.com/questions/45172834/how-to-run-post-synthesis-simulation-with-the-icestorm-ice40-fpga-flow

https://github.com/YosysHQ/icestorm/blob/master/examples/icestick/Makefile





********************************************************************








20240205 https://www.verilogpro.com/verilog-case-casez-casex/#google_vignette

case


    Case statement header—consists of the case, casez, or casex keyword followed by case expression
    Case expression—the expression in parentheses immediately following the case keyword. Valid expressions include constants (e.g. 1’b1), an expression that evaluates to a constant, or a vector
    Case item—the expression that is compared against the case expression. Note that C-style break is implied following each case item statement
    Case item statement—one or more statements that is executed if the case item matches the current case expression. If more than one statement is required, they must be enclosed with begin…end
    Case default—optional, but can include statements to be executed if none of the defined case items match the current case expression

Note: the X and Z values won't match a binary value in a case during sim.  They will match
the default, though!  Need a default in order to not infer a latch!!!



casez


The plain case statement is simple but rigid -- everything must be explicitly coded. 
In some situations, you may want to specify a case item that can match multiple 
case expressions. This is where "wildcard" case expressions casez and casex come 
in. casez allows Z and ? to be treated as don't care values in either the case 
expression and/or the case item when doing case comparison. For example, a case 
item 2'b1? (or 2'b1Z) in a casez statement can match case expression of 2'b10, 
2'b11, 2'b1X, 2'b1Z. It is generally recommended to use ? characters instead of Z
characters in the case item to indicate don't care bits.

Verilog wildcard case statements can have overlapping case items. If more than 
one case item can match a case expression, the first matching case item has 
priority. Thus, priority logic can be inferred from a case statement. The 
following code snippet illustrates how casez can be used to code priority logic. 
It simulates and synthesizes correctly as a priority decoder.

always @(irq) begin
  {int2, int1, int0} = 3'b000;
  casez (irq)
    3'b1?? : int2 = 1'b1;
    3'b?1? : int1 = 1'b1;
    3'b??1 : int0 = 1'b1;
    default: {int2, int1, int0} = 3'b000;
  endcase
end



Even though this may seem an elegant way to code a priority decoder, the 
priority intention may only be apparent to the most experienced coders. 
Therefore, it is generally recommended to code priority logic using the 
more explicit if-else statement to clearly convey the intention.


WILDCARDS WORK BOTH WAYS!!!!


While wildcard case comparison can be useful, it also has its dangers. 
Imagine a potentially dangerous casez statement where the case expression 
is a vector and one bit resolves to a Z, perhaps due to a mistakenly 
unconnected input. That expression will match a case item with any value 
for the Z bit! To put in more concrete terms, if the LSB of irq in the above 
code snippet is unconnected such that the case expression evaluates to 3b00Z, 
the third case item will still match and int0 will be set to 1, potentially 
masking a bug!

BUT... this is more of a problem during sim than in synth.	<-------------------


Now that we understand the usage and dangers of casez, it is straight-forward to extend the discussion to casex. casex allows “Z”, “?”, and “X” to be treated as don’t care values in either the case expression and/or the case item when doing case comparison. That means, everything we discussed for casez also applies for casex, plus “X” is now also a wildcard. In my previous article on Verilog X Optimism I discussed how X’s can propagate around a design and mask design issues. These propagated X’s can easily cause problems when combined with casex statements. To avoid these problems, the recommendation from RTL Coding Styles That Yield Simulation and Synthesis Mismatches is not to use casex at all for synthesizable code.

Verilog case, casez, casex each has its place and use cases. Understanding the differences between them is key to using them correctly and avoiding bugs. It may also help you in your next job interview 🙂





20240205 https://www.verilogpro.com/systemverilog-unique-priority/



Improperly coded Verilog case statements can frequently cause unintended synthesis optimizations or unintended latches. These problems, if not caught in pre-silicon simulations or gate level simulations, can easily lead to a non-functional chip. The new SystemVerilog unique and priority keywords are designed to address these coding traps. In this article, we will take a closer look at how to use these new SystemVerilog keywords in RTL coding. The reader is assumed to have knowledge of how Verilog case statements work. Those who are not familiar can refer to my previous post “Verilog twins: case, casez, casex. Which Should I Use?“

The SystemVerilog unique and priority modifiers are placed before an if, case, casez, casex statement, like this:



unique if (expression)
  statements
else
  statements

priority case (case_expression)
  case_item_1: case_expression_1
  case_item_2: case_expression_2
endcase


With the if…else statement, the SystemVerilog unique or priority keyword is placed only before the first if, but affects all subsequent else if and else statements.


SystemVerilog Unique Keyword

The unique keyword tells all software tools that support SystemVerilog, including those for simulation, synthesis, lint-checking, formal verification, that each selection item in a series of decisions is unique from any other selection item in that series, and that all legal cases have been listed. In other words, each item is mutually exclusive, and the if…else or case statement specifies all valid selection items.

It is easier to illustrate the effects of SystemVerilog unique using a case statement. unique case causes a simulator to add run-time checks that will report a warning if any of the following conditions are true:

    More than one case item matches the case expression
    No case item matches the case expression, and there is no default case

To illustrate how SystemVerilog unique affects simulation of case statements, let’s look at a wildcard casez statement:


always @(irq) begin
  {int2, int1, int0} = 3'b000;
  unique casez (irq)
    3'b1?? : int2 = 1'b1;
    3'b?1? : int1 = 1'b1;
    3'b??1 : int0 = 1'b1;
  endcase
end



You may recognize that this code resembles the priority decoder example from my previous post “Verilog twins: case, casez, casex. Which Should I Use?” However, by adding the SystemVerilog unique keyword, the behaviour is now completely different.

Firstly, by adding the SystemVerilog unique keyword, the designer asserts that only one case item can match at a time. If more than one bit of irq is set in simulation, the simulator will generate a warning, flagging that the assumption of irq being one-hot has been violated. Secondly, to synthesis tools, the unique keyword tells the tool that all valid case items have been specified, and can be evaluated in parallel. Synthesis is free to optimize the case items that are not listed.

Read the second point again, it is paramount! In a unique case statement (without a default case), outputs after synthesis from any unlisted case item is indeterminate. In simulation you may see a deterministic behaviour, maybe even an output that looks correct (along with an easy-to-miss warning), but that may not match what you see in silicon. I have personally seen a chip that did not work because of this coding error.

Back to the example, because of the unique keyword, synthesis will remove the priority logic. Thus, this code example is actually a decoder with no priority logic. Eliminating unnecessary priority logic typically results in smaller and faster logic, but only if it is indeed the designer’s intention.

The SystemVerilog unique keyword can be applied similarly to an if…else statement to convey the same uniqueness properties. For a unique if statement, a simulator will generate a run-time warning if any of the following is false:



    If two or more of the if conditions are true at the same time
    If all of the if conditions (including else if) are false, and there is no final else branch

SystemVerilog 2012 adds the keyword unique0 which, when used with a case or if statement, generates a warning only for the first condition above.


The priority keyword instructs all tools that support SystemVerilog that each selection item in a series of decisions must be evaluated in the order in which they are listed, and all legal cases have been listed. A synthesis tool is free to optimize the logic assuming that all other unlisted conditions are don’t cares. If the priority case statement includes a case default statement, however, then the effect of the priority keyword is disabled because the case statement has then listed all possible conditions. In other words, the case statement is full.

Since the designer asserts that all conditions have been listed, a priority case will cause simulators to add run-time checks that will report a warning for the following condition:

    If the case expression does not match any of the case item expressions, and there is no default case

A priority if will cause simulators to report a warning if all of the if…if else conditions are false, and there is no final else branch. An else branch will disable the effect of the priority if.

When to Use Them

SystemVerilog unique and priority should be used especially in case statements that infer priority or non-priority logic. Using these keywords help convey design intent, guide synthesis tools to the correct result, and adds simulation and formal verification assertions that check for violation of design assumptions. One suggestion from “full_case parallel_case”, the Evil Twins of Verilog Synthesis is to code intentional priority encoders using if…else if statements rather than case statements, as it is easier for the typical engineer to recognize a priority encoder coded that way.

SystemVerilog unique and priority do not guarantee the removal of unwanted latches. Any case statement that makes assignments to more than one output in each case item statement can still generate latches if one or more output assignments are missing from other case item statements. One of the easiest ways to avoid these unwanted latches is by making a default assignment to the outputs before the case statement.

The unique and priority keywords should not be blindly added to any case and if statements either. Below is an example where the priority keyword will cause a design to break. The hardware that is intended is a decoder with enable en. When en=0, the decoder should output 4’b0000 on y.


logic [3:0] y;
logic [1:0] a;
logic       en;

always_comb begin
  y = '0;
  priority case ({en,a})
    3'b100: y[a] = 1'b1;
    3'b101: y[a] = 1'b1;
    3'b110: y[a] = 1'b1;
    3'b111: y[a] = 1'b1;
  endcase
end

Here the priority keyword indicates that all unlisted case items are don’t cares, and can be optimized. As a result, the synthesis tool will simply optimize away en, which results in a different hardware than what was intended. A simulator will report a warning whenever en=0, which should raise an alarm warning that something is wrong. The unique keyword will have the same result here.

SystemVerilog unique and priority help avoid bugs from incorrectly coded case and if…else statements. They are part of the SystemVerilog language which means all tools that support SystemVerilog, including those for simulation, lint-checking, formal verification, synthesis, all have to implement the same specification of these keywords. Using these keywords help convey design intent, guide synthesis tools to the correct result, and adds simulation and formal verification checks for violation of design assumption.

In this post I have purposely tried to avoid discussing the Verilog pragmas full_case and parallel_case to write a more stand-alone discussion of the SystemVerilog unique and priority keywords. Those who are interested in the historical development of these keywords from Verilog full_case and parallel_case can refer to “full_case parallel_case”, the Evil Twins of Verilog Synthesis.


